# bot.py
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from config import BOT_TOKEN, ADMIN_ID  # –¥–æ–±–∞–≤–∏–º —Å–≤–æ–π ID —Å—é–¥–∞
from openai_api import chat_with_g4f, MODEL_PRIORITY
from keyboard import get_main_keyboard
from log import log_message

import asyncio
import os

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–∞–º—è—Ç—å
user_model = {}
active_requests = {}  # user_id -> "–û–∂–∏–¥–∞–µ—Ç" –∏–ª–∏ "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
last_messages = {}    # user_id -> –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"
    text = message.text.strip()

    if text == "/start":
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return

    if text == "/status" and user_id == ADMIN_ID:
        status_report = "\n".join([
            f"üë§ {uid}: {status} | –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {last_messages.get(uid, '')[:30]}"
            for uid, status in active_requests.items()
        ]) or "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."
        await message.answer(f"üõ† –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n{status_report}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ —Å–ø—Ä–æ—Å–∏–ª
    last_messages[user_id] = text
    active_requests[user_id] = "–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞"

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –æ–∂–∏–¥–∞–Ω–∏–µ
    thinking_message = await message.answer("‚åõ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å...")

    preferred_model = user_model.get(user_id)

    try:
        bot_response = await chat_with_g4f(text, preferred_model=preferred_model)
        await thinking_message.edit_text(bot_response, parse_mode=ParseMode.MARKDOWN, reply_markup=get_main_keyboard())

        log_message(user_id, username, text, bot_response)
        active_requests[user_id] = "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ"

    except Exception as e:
        error_text = str(e)
        await thinking_message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞:\n{error_text}", reply_markup=get_main_keyboard())
        active_requests[user_id] = "–û—à–∏–±–∫–∞ ‚ùå"

@dp.callback_query(F.data == "current_model")
async def show_current_model(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    model = user_model.get(user_id, MODEL_PRIORITY[0])
    await callback_query.message.answer(f"üìÑ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: `{model}`", parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(F.data == "change_model")
async def change_model(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    current = user_model.get(user_id, MODEL_PRIORITY[0])
    try:
        idx = MODEL_PRIORITY.index(current)
        new_model = MODEL_PRIORITY[(idx + 1) % len(MODEL_PRIORITY)]
    except:
        new_model = MODEL_PRIORITY[0]

    user_model[user_id] = new_model
    await callback_query.message.answer(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–º–µ–Ω–µ–Ω–∞ –Ω–∞ `{new_model}`", parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(F.data == "reset_history")
async def reset_history(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        os.remove(f"logs/{user_id}.log")
        await callback_query.message.answer("üóë –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω–∞!")
    except:
        await callback_query.message.answer("‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
